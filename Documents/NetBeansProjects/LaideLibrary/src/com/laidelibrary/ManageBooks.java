/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.laidelibrary;

import java.sql.ResultSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author pc
 */
public class ManageBooks extends javax.swing.JFrame {

    /**
     * Creates new form ManageBooks
     */
    // Populating the table object with values from the database
    // Creating the ResultSet object that holds the value from the database
    // table
    ResultSet tableContents = null;

    // Creating an object of the SQLQueries Class
    SQLQueries sqlqueriesObject = new SQLQueries();

    public ManageBooks() {
        initComponents();

        //Centralise the Window
        this.setLocationRelativeTo(null);

        //Stop the Window Exit Button from closing the application
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        // Executing the required method within the SQLQueries class
        // and saving it to the ResultSet object
        tableContents = sqlqueriesObject.getAllBooks();

        // Populating the Java table object with the values in the  
        // saved ResultSet object
        tbAllBooks.setModel(DbUtils.resultSetToTableModel(tableContents));
        tbAllBooks.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblColumnToUpdate = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        cbUpdateColumn = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAllBooks = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        txtUpdateValue = new javax.swing.JTextField();
        lblAllBooks = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblUpdateBook = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnAddNewBook = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblDeleteBook = new javax.swing.JLabel();
        cbGenre = new javax.swing.JComboBox<>();
        lblBookId = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        spnUpdateBookID = new javax.swing.JSpinner();
        lblTitle = new javax.swing.JLabel();
        lblBookId1 = new javax.swing.JLabel();
        spnDeleteBookID = new javax.swing.JSpinner();
        txtSearch = new javax.swing.JTextField();
        btnRefreshTable = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblColumnToUpdate.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblColumnToUpdate.setForeground(new java.awt.Color(56, 72, 96));
        lblColumnToUpdate.setText("Select column to update:");

        jSeparator2.setForeground(new java.awt.Color(76, 171, 118));

        cbUpdateColumn.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        cbUpdateColumn.setForeground(new java.awt.Color(56, 72, 96));
        cbUpdateColumn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Title", "Author", "Genre", "QuantityInStock" }));
        cbUpdateColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUpdateColumnActionPerformed(evt);
            }
        });

        tbAllBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbAllBooks);

        btnUpdate.setBackground(new java.awt.Color(56, 72, 96));
        btnUpdate.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtUpdateValue.setEnabled(false);

        lblAllBooks.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblAllBooks.setForeground(new java.awt.Color(56, 72, 96));
        lblAllBooks.setText("All Books");

        jSeparator1.setForeground(new java.awt.Color(76, 171, 118));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setToolTipText("");

        lblUpdateBook.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblUpdateBook.setForeground(new java.awt.Color(56, 72, 96));
        lblUpdateBook.setText("Update Book");
        lblUpdateBook.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        btnDelete.setBackground(new java.awt.Color(56, 72, 96));
        btnDelete.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAddNewBook.setBackground(new java.awt.Color(56, 72, 96));
        btnAddNewBook.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        btnAddNewBook.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNewBook.setText("Add New Book");
        btnAddNewBook.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAddNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewBookActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(64, 120, 102));
        btnBack.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblDeleteBook.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        lblDeleteBook.setForeground(new java.awt.Color(56, 72, 96));
        lblDeleteBook.setText("Delete Book");
        lblDeleteBook.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        cbGenre.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        cbGenre.setForeground(new java.awt.Color(56, 72, 96));
        cbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Christian", "Fiction", "Fantasy", "Science Fiction", "Dystopian", "Action & Adventure", "Mystery", "Horror", "Thriller & Suspense", "Historical Fiction", "Romance", "Women''s Fiction", "Contemporary Fiction", "Literary Fiction", "Magical Realism", "Graphic Novel", "Short Story", "Young Adult", "New Adult", "Children''s", "Nonfiction", "Memoir & Autobiography", "Biography", "Food & Drink", "Art & Photography", "Self-help", "History", "Travel", "True Crime", "Humour", "Essay", "Guide / How-to", "Religion & Spirituality", "Humanities & Social Sciences", "Parenting & Families", "Science & Technology", "Other" }));
        cbGenre.setEnabled(false);

        lblBookId.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblBookId.setForeground(new java.awt.Color(56, 72, 96));
        lblBookId.setText("Book ID:");

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/laidelibrary/images/laide_library_logo.png"))); // NOI18N

        spnUpdateBookID.setFont(new java.awt.Font("Cambria", 0, 11)); // NOI18N
        spnUpdateBookID.setModel(new javax.swing.SpinnerNumberModel());

        lblTitle.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(56, 72, 96));
        lblTitle.setText("Manage Books");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblBookId1.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        lblBookId1.setForeground(new java.awt.Color(56, 72, 96));
        lblBookId1.setText("Book ID:");

        spnDeleteBookID.setFont(new java.awt.Font("Cambria", 0, 11)); // NOI18N
        spnDeleteBookID.setModel(new javax.swing.SpinnerNumberModel());

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnRefreshTable.setBackground(new java.awt.Color(56, 72, 96));
        btnRefreshTable.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnRefreshTable.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshTable.setText("Refresh Table");
        btnRefreshTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTableActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Cambria", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(56, 72, 96));
        jLabel1.setText("Search:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAllBooks)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(62, 62, 62)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUpdateValue)
                                .addComponent(cbGenre, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbUpdateColumn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(55, 55, 55))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnAddNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(60, 60, 60)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblColumnToUpdate)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblUpdateBook)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblBookId)
                                            .addGap(18, 18, 18)
                                            .addComponent(spnUpdateBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(lblBookId1)
                                .addGap(18, 18, 18)
                                .addComponent(spnDeleteBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(lblDeleteBook)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(434, 434, 434)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblTitle))
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblUpdateBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spnUpdateBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblColumnToUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbUpdateColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUpdateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(lblDeleteBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spnDeleteBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBookId1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefreshTable, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblAllBooks)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addComponent(jSeparator1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbUpdateColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUpdateColumnActionPerformed
        // Code to handle what happens when a column to be updated is selected
        if (cbUpdateColumn.getSelectedItem().toString().equals("Title")) {
            txtUpdateValue.setEnabled(true);
            cbGenre.setSelectedItem("Select");
            cbGenre.setEnabled(false);
        } else if (cbUpdateColumn.getSelectedItem().toString().equals("Author")) {
            txtUpdateValue.setEnabled(true);
            cbGenre.setSelectedItem("Select");
            cbGenre.setEnabled(false);
        } else if (cbUpdateColumn.getSelectedItem().toString().equals("Genre")) {
            txtUpdateValue.setText("");
            txtUpdateValue.setEnabled(false);
            cbGenre.setEnabled(true);
        } else if (cbUpdateColumn.getSelectedItem().toString().equals("QuantityInStock")) {
            txtUpdateValue.setEnabled(true);
            cbGenre.setSelectedItem("Select");
            cbGenre.setEnabled(false);
        }
    }//GEN-LAST:event_cbUpdateColumnActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // Create an SQLQueries object to check availability of the book in database
        SQLQueries queryObject = new SQLQueries();

        // Get the content of the Book ID Spinner
        int bookID = (int) spnUpdateBookID.getValue();

        // Check that column to be updated is selected
        String column = cbUpdateColumn.getSelectedItem().toString();
        String data = txtUpdateValue.getText();

        // patterns for valid title and author
        Pattern titlePattern
                = Pattern.compile("^[A-Za-z0-9\\s\\-()\\?!'\\.]{2,100}+$");
        Pattern authorPattern = Pattern.compile("[A-Za-z\\s\\.]{2,100}");

        // matching the text in the fields against their respective patterns
        Matcher titleMatcher = titlePattern.matcher(data);
        Matcher authorMatcher = authorPattern.matcher(data);

        try {
            //Confirm that the bookID field is not left blank or zero
            if (bookID == 0) {
                JOptionPane.showMessageDialog(this,
                        "Please enter BookID!",
                        "Enter BookID!", JOptionPane.WARNING_MESSAGE);
            } else if (column.equals("Select")) {
                JOptionPane.showMessageDialog(this,
                        "Please select a column to be updated!",
                        "Select update column!", JOptionPane.WARNING_MESSAGE);
            } else if (data.trim().isEmpty() && !cbGenre.isEnabled()) {
                JOptionPane.showMessageDialog(this, "Please enter the new " + column
                        + "!", column + " Field is Blank!",
                        JOptionPane.WARNING_MESSAGE);
            } else if (column.equals("Title") && !titleMatcher.matches()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid " + column
                        + "!", "Invalid " + column + "!",
                        JOptionPane.WARNING_MESSAGE);
            } else if (column.equals("Author") && !authorMatcher.matches()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid " + column
                        + " Name!", "Invalid " + column + "!",
                        JOptionPane.WARNING_MESSAGE);
            } else if (column.equals("QuantityInStock") && Integer.parseInt(data) < 1) {
                JOptionPane.showMessageDialog(this, "Please enter a valid " + column
                        + "!", "Invalid " + column + "!",
                        JOptionPane.WARNING_MESSAGE);
            } else if (column.equals("Genre") && cbGenre.getSelectedItem().toString().equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select a " + column
                        + "!", "Select a " + column + "!",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                // Check if book to be updated exists in the database
                String bookStatus = queryObject.validateBook(bookID);

                if (bookStatus.equals("valid")) {
                    // Check if Genre is to be updated before updating book details
                    if (column.equals("Genre")) {
                        data = cbGenre.getSelectedItem().toString();
                    }
                    // update the book's details
                    String updateStatus
                            = queryObject.updateBook(bookID, column, data);
                    if (updateStatus.equals("successful")) {
                        JOptionPane.showMessageDialog(this,
                                "Update Successful!", "Success!",
                                JOptionPane.INFORMATION_MESSAGE);
                        // Executing the required method within the SQLQueries class
                        // and saving it to the ResultSet object
                        tableContents = sqlqueriesObject.getAllBooks();

                        // Populating the Java table object with the values in the  
                        // saved ResultSet object
                        tbAllBooks.setModel(DbUtils.resultSetToTableModel(tableContents));
                        tbAllBooks.setEnabled(false);
                        // Reset update fields
                        spnUpdateBookID.setValue(0);
                        cbUpdateColumn.setSelectedItem("Select");
                        txtUpdateValue.setText("");
                        cbGenre.setSelectedItem("Select");
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Unable to update Book's Details!",
                                "An error occured!",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Please enter a valid Book ID!",
                            "Error! Invalid BookID!",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid Quantity in Stock!",
                    "Error! Invalid Quantity in Stock!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Create an SQLQueries object to check availability of the user in database
        SQLQueries queryObject = new SQLQueries();

        // Get the content of the Book ID Spinner
        int bookID = (int) spnDeleteBookID.getValue();

        if (bookID <= 0) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid Book ID!",
                    "Invalid Book ID!", JOptionPane.WARNING_MESSAGE);
        } else {
            // Check if book to be deleted exists in the database
            String bookStatus = queryObject.validateBook(bookID);

            if (bookStatus.equals("valid")) {
                int deleteStatus = queryObject.deleteBook(bookID);

                // if deletion is successful
                if (deleteStatus == 1) {
                    JOptionPane.showMessageDialog(this,
                            "Book deleted successfully!", "Success!",
                            JOptionPane.INFORMATION_MESSAGE);
                    // Executing the method within the SQLQueries class to populate the
                    // table with the current contents and saving it to the ResultSet object
                    tableContents = sqlqueriesObject.getAllBooks();

                    // Populating the Java table object with the values in the 
                    // saved ResultSet object
                    tbAllBooks.setModel(DbUtils.resultSetToTableModel(tableContents));

                    // Reset all delete fields
                    spnDeleteBookID.setValue(0);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Book with ID: " + bookID + " does not exist!",
                            "Error deleting book!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "Book with ID: " + bookID + " does not exist!",
                        "Error deleting book!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewBookActionPerformed
        // Display the Add Book Form
        AddBook abObject = new AddBook();
        abObject.setVisible(true);

    }//GEN-LAST:event_btnAddNewBookActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Close this window
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // The object to filter through
        TableRowSorter sorter;

        // Executing the required method within the SQLQueries class
        // and saving it to the ResultSet object
        tableContents = sqlqueriesObject.getAllBooks();

        // Setting up the search functionality
        sorter = new TableRowSorter<>(DbUtils.resultSetToTableModel(tableContents));
        tbAllBooks.setRowSorter(sorter);

        // Getting the value typed
        String search = txtSearch.getText();

        // Filtering through the values in the table
        if (txtSearch.getText().trim().isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + search));
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTableActionPerformed
        // Executing the method within the SQLQueries class to populate the
        // table with the current contents and saving it to the ResultSet object
        ResultSet newContents = sqlqueriesObject.getAllBooks();

        // Populating the Java table object with the values in the
        // saved ResultSet object
        tbAllBooks.setModel(DbUtils.resultSetToTableModel(newContents));
    }//GEN-LAST:event_btnRefreshTableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewBook;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefreshTable;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbGenre;
    private javax.swing.JComboBox<String> cbUpdateColumn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAllBooks;
    private javax.swing.JLabel lblBookId;
    private javax.swing.JLabel lblBookId1;
    private javax.swing.JLabel lblColumnToUpdate;
    private javax.swing.JLabel lblDeleteBook;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUpdateBook;
    private javax.swing.JSpinner spnDeleteBookID;
    private javax.swing.JSpinner spnUpdateBookID;
    private javax.swing.JTable tbAllBooks;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUpdateValue;
    // End of variables declaration//GEN-END:variables
}
